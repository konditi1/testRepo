openapi: 3.0.0
info:
  title: EvalHub API
  description: Enterprise API for EvalHub platform with role-based security
  version: 1.0.0
  contact:
    name: EvalHub API Support
    url: https://evalhub.com/support
    email: api-support@evalhub.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:9000/api/v1
    description: Development server
  - url: https://api.evalhub.com/v1
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Type "Bearer" followed by a space and JWT token
    SessionAuth:
      type: apiKey
      in: cookie
      name: session_token
      description: Session-based authentication cookie

  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
          nullable: true
    
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message

    # Authentication schemas
    RegisterRequest:
      type: object
      required:
        - email
        - username
        - password
        - confirm_password
        - first_name
        - last_name
        - role
        - accept_terms
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: johndoe
        password:
          type: string
          format: password
          minLength: 8
          example: securePassword123!
        confirm_password:
          type: string
          format: password
          minLength: 8
          example: securePassword123!
        first_name:
          type: string
          minLength: 1
          maxLength: 100
          example: John
        last_name:
          type: string
          minLength: 1
          maxLength: 100
          example: Doe
        role:
          type: string
          enum: [expert, evaluator, admin]
          example: expert
        accept_terms:
          type: boolean
          example: true
        affiliation:
          type: string
          nullable: true
          example: "Example University"
        bio:
          type: string
          nullable: true
          example: "Experienced professional in the field"

    LoginRequest:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          description: Email or username
          example: user@example.com
        password:
          type: string
          format: password
          example: securePassword123!
        remember:
          type: boolean
          description: Whether to create a persistent session
          default: false

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: Refresh token for getting new access tokens
          nullable: true
        expires_in:
          type: integer
          description: Token expiration in seconds
        token_type:
          type: string
          default: Bearer
        user:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
            username:
              type: string
              example: johndoe
            email:
              type: string
              format: email
              example: user@example.com
            first_name:
              type: string
              nullable: true
              example: John
            last_name:
              type: string
              nullable: true
              example: Doe
            role:
              type: string
              example: expert

# User schemas
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: user@example.com
        first_name:
          type: string
          nullable: true
          example: John
        last_name:
          type: string
          nullable: true
          example: Doe
        role:
          type: string
          enum: [expert, evaluator, admin]
          example: expert
        bio:
          type: string
          nullable: true
          example: Experienced professional in the field
        avatar_url:
          type: string
          format: uri
          nullable: true
          example: https://example.com/avatars/johndoe.jpg
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"

    UpdateProfileRequest:
      type: object
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 100
          example: John
          nullable: true
        last_name:
          type: string
          minLength: 1
          maxLength: 100
          example: Doe
          nullable: true
        bio:
          type: string
          maxLength: 1000
          example: Experienced professional in the field
          nullable: true
        location:
          type: string
          maxLength: 100
          example: New York, NY
          nullable: true
        website:
          type: string
          format: uri
          maxLength: 255
          example: https://example.com
          nullable: true

    UserStats:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        posts_count:
          type: integer
          example: 42
        comments_count:
          type: integer
          example: 128
        followers_count:
          type: integer
          example: 256
        following_count:
          type: integer
          example: 128
        reputation:
          type: integer
          example: 1024
        last_active:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"

    UserActivity:
      type: object
      properties:
        date:
          type: string
          format: date
          example: "2023-01-01"
        actions:
          type: integer
          example: 5
        posts_created:
          type: integer
          example: 2
        comments_posted:
          type: integer
          example: 3

# API paths
paths:
  # ===================================
  # AUTHENTICATION ENDPOINTS
  # ===================================
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Register a new user with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request format or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User with email or username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate a user
      description: Authenticate a user with email/username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Account locked or not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout the current user
      description: Invalidate the current session
      security:
        - BearerAuth: []
        - SessionAuth: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh authentication token
      description: Get a new access token using a refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: The refresh token
      responses:
        '200':
          description: New tokens generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Send a password reset link to the provided email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid email format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many reset attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ===================================
  # USER ENDPOINTS
  # ===================================

  /users/profile:
    get:
      tags:
        - Users
      summary: Get current user's profile
      description: Retrieves the authenticated user's profile information
      security:
        - BearerAuth: []
        - SessionAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Update current user's profile
      description: Updates the authenticated user's profile information
      security:
        - BearerAuth: []
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/profile/image:
    post:
      tags:
        - Users
      summary: Upload profile image
      description: Uploads a new profile image for the authenticated user
      security:
        - BearerAuth: []
        - SessionAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Image file to upload (JPG, PNG, or GIF, max 5MB)
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image_url:
                    type: string
                    description: URL of the uploaded image
        '400':
          description: Invalid file format or size
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieves a user's public profile by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: User ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/username/{username}:
    get:
      tags:
        - Users
      summary: Get user by username
      description: Retrieves a user's public profile by username
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - Users
      summary: List users
      description: Retrieves a paginated list of users with optional filtering
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
        - name: role
          in: query
          schema:
            type: string
            enum: [expert, evaluator, admin]
          description: Filter by user role
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, suspended]
          description: Filter by user status
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserProfile'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /users/search:
    get:
      tags:
        - Users
      summary: Search users
      description: Searches for users based on query criteria
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserProfile'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
